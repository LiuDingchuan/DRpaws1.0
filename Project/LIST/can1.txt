; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\can1.o --asm_dir=..\LIST\ --list_dir=..\LIST\ --depend=..\obj\can1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\casual\inc -I..\..\user\INC -IC:\Users\24828\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IE:\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=531 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\can1.crf ..\..\user\SRC\can1.c]
                          THUMB

                          AREA ||i.CAN1_Init||, CODE, READONLY, ALIGN=2

                  CAN1_Init PROC
;;;5      
;;;6      void CAN1_Init(void)
000000  b500              PUSH     {lr}
;;;7      {
000002  b089              SUB      sp,sp,#0x24
;;;8      	CAN_InitTypeDef CAN_InitStruct;
;;;9      	GPIO_InitTypeDef GPIO_InitStucture;
;;;10     	CAN_FilterInitTypeDef CAN_FilterInitStructure;
;;;11     	NVIC_InitTypeDef NVIC_InitStructure;
;;;12     	
;;;13     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1,ENABLE);												//使能CAN1时钟
000004  2101              MOVS     r1,#1
000006  0648              LSLS     r0,r1,#25
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;14     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO,ENABLE);											//使能PORTA时钟
00000c  2101              MOVS     r1,#1
00000e  2005              MOVS     r0,#5
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;15     
;;;16     	GPIO_InitStucture.GPIO_Mode=GPIO_Mode_AF_PP;															//复用推挽
000014  2018              MOVS     r0,#0x18
000016  f88d0017          STRB     r0,[sp,#0x17]
;;;17     	GPIO_InitStucture.GPIO_Pin=GPIO_Pin_12;
00001a  f44f5080          MOV      r0,#0x1000
00001e  f8ad0014          STRH     r0,[sp,#0x14]
;;;18     	GPIO_InitStucture.GPIO_Speed=GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0016          STRB     r0,[sp,#0x16]
;;;19     	GPIO_Init(GPIOA,&GPIO_InitStucture);
000028  a905              ADD      r1,sp,#0x14
00002a  4853              LDR      r0,|L1.376|
00002c  f7fffffe          BL       GPIO_Init
;;;20     	
;;;21     	GPIO_InitStucture.GPIO_Mode=GPIO_Mode_IPU;															//一个要拉高电平
000030  2048              MOVS     r0,#0x48
000032  f88d0017          STRB     r0,[sp,#0x17]
;;;22     	GPIO_InitStucture.GPIO_Pin=GPIO_Pin_11;
000036  f44f6000          MOV      r0,#0x800
00003a  f8ad0014          STRH     r0,[sp,#0x14]
;;;23     	GPIO_InitStucture.GPIO_Speed=GPIO_Speed_50MHz;
00003e  2003              MOVS     r0,#3
000040  f88d0016          STRB     r0,[sp,#0x16]
;;;24     	GPIO_Init(GPIOA,&GPIO_InitStucture);
000044  a905              ADD      r1,sp,#0x14
000046  484c              LDR      r0,|L1.376|
000048  f7fffffe          BL       GPIO_Init
;;;25     		
;;;26     	CAN_InitStruct.CAN_ABOM=DISABLE;																				//软件自动离线管理
00004c  2000              MOVS     r0,#0
00004e  f88d001f          STRB     r0,[sp,#0x1f]
;;;27     	CAN_InitStruct.CAN_AWUM=DISABLE;																				//睡眠模式通过软件唤醒
000052  f88d0020          STRB     r0,[sp,#0x20]
;;;28     	CAN_InitStruct.CAN_BS1=CAN_BS1_4tq;																			//时间段1占用时间单位
000056  2003              MOVS     r0,#3
000058  f88d001c          STRB     r0,[sp,#0x1c]
;;;29     	CAN_InitStruct.CAN_BS2=CAN_BS2_4tq;																			//时间段2占用时间单位
00005c  f88d001d          STRB     r0,[sp,#0x1d]
;;;30     	CAN_InitStruct.CAN_Mode=CAN_Mode_Normal;																						//模式设置：0，普通模式；1，回回环模式
000060  2000              MOVS     r0,#0
000062  f88d001a          STRB     r0,[sp,#0x1a]
;;;31     	CAN_InitStruct.CAN_NART=ENABLE;																					//禁止报文自动传送
000066  2001              MOVS     r0,#1
000068  f88d0021          STRB     r0,[sp,#0x21]
;;;32     	CAN_InitStruct.CAN_Prescaler=4;																				//分频系数(Fdiv)为brp+1
00006c  2004              MOVS     r0,#4
00006e  f8ad0018          STRH     r0,[sp,#0x18]
;;;33     	CAN_InitStruct.CAN_RFLM=DISABLE;																				//报文不锁定，新的覆盖旧的
000072  2000              MOVS     r0,#0
000074  f88d0022          STRB     r0,[sp,#0x22]
;;;34     	CAN_InitStruct.CAN_SJW=CAN_SJW_1tq;																						//重新同步跳跃宽度
000078  f88d001b          STRB     r0,[sp,#0x1b]
;;;35     	CAN_InitStruct.CAN_TTCM=DISABLE;																				//非时间触发通信模式
00007c  f88d001e          STRB     r0,[sp,#0x1e]
;;;36     	CAN_InitStruct.CAN_TXFP=DISABLE;																				//优先级由报文标识符确定
000080  f88d0023          STRB     r0,[sp,#0x23]
;;;37     	CAN_Init(CAN1,&CAN_InitStruct);
000084  a906              ADD      r1,sp,#0x18
000086  483d              LDR      r0,|L1.380|
000088  f7fffffe          BL       CAN_Init
;;;38     	
;;;39     	CAN_FilterInitStructure.CAN_FilterActivation=ENABLE;											//激活过滤器0
00008c  2001              MOVS     r0,#1
00008e  f88d0011          STRB     r0,[sp,#0x11]
;;;40     	CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_Filter_FIFO0;
000092  2000              MOVS     r0,#0
000094  f8ad000c          STRH     r0,[sp,#0xc]
;;;41     	CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit;	
000098  2001              MOVS     r0,#1
00009a  f88d0010          STRB     r0,[sp,#0x10]
;;;42     	CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdMask;
00009e  2000              MOVS     r0,#0
0000a0  f88d000f          STRB     r0,[sp,#0xf]
;;;43     	CAN_FilterInitStructure.CAN_FilterIdHigh=((0x00010400<<3)&0xffff0000)>>16;			//32位ID
0000a4  2008              MOVS     r0,#8
0000a6  f8ad0004          STRH     r0,[sp,#4]
;;;44     	CAN_FilterInitStructure.CAN_FilterIdLow=(0x00010400<<3)&0xffff;														
0000aa  0280              LSLS     r0,r0,#10
0000ac  f8ad0006          STRH     r0,[sp,#6]
;;;45     	CAN_FilterInitStructure.CAN_FilterMaskIdHigh=(0xffff0000<<3)>>16;					//32位MASK
0000b0  f64f70f8          MOV      r0,#0xfff8
0000b4  f8ad0008          STRH     r0,[sp,#8]
;;;46     	CAN_FilterInitStructure.CAN_FilterMaskIdLow=(0xffff00<<3)&0xffff;
0000b8  f44f4078          MOV      r0,#0xf800
0000bc  f8ad000a          STRH     r0,[sp,#0xa]
;;;47     	CAN_FilterInitStructure.CAN_FilterNumber=0;																//过滤器0
0000c0  2000              MOVS     r0,#0
0000c2  f88d000e          STRB     r0,[sp,#0xe]
;;;48     	CAN_FilterInit(&CAN_FilterInitStructure);
0000c6  a801              ADD      r0,sp,#4
0000c8  f7fffffe          BL       CAN_FilterInit
;;;49     
;;;50     	CAN_FilterInitStructure.CAN_FilterNumber = 1; //屏蔽位模式
0000cc  2001              MOVS     r0,#1
0000ce  f88d000e          STRB     r0,[sp,#0xe]
;;;51     	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
0000d2  2000              MOVS     r0,#0
0000d4  f88d000f          STRB     r0,[sp,#0xf]
;;;52     	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
0000d8  2001              MOVS     r0,#1
0000da  f88d0010          STRB     r0,[sp,#0x10]
;;;53     	CAN_FilterInitStructure.CAN_FilterIdHigh =((0x00010000 << 3) & 0xFFFF0000) >> 16;
0000de  2008              MOVS     r0,#8
0000e0  f8ad0004          STRH     r0,[sp,#4]
;;;54     	CAN_FilterInitStructure.CAN_FilterIdLow = (0x00010000 << 3) & 0xFFFF;
0000e4  2000              MOVS     r0,#0
0000e6  f8ad0006          STRH     r0,[sp,#6]
;;;55     	CAN_FilterInitStructure.CAN_FilterMaskIdHigh = (0xFFFF0000 << 3) >> 16;
0000ea  f64f70f8          MOV      r0,#0xfff8
0000ee  f8ad0008          STRH     r0,[sp,#8]
;;;56     	CAN_FilterInitStructure.CAN_FilterMaskIdLow = (0xFFFF0000 << 3) & 0xFFFF;
0000f2  2000              MOVS     r0,#0
0000f4  f8ad000a          STRH     r0,[sp,#0xa]
;;;57     	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
0000f8  f8ad000c          STRH     r0,[sp,#0xc]
;;;58     	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
0000fc  2001              MOVS     r0,#1
0000fe  f88d0011          STRB     r0,[sp,#0x11]
;;;59     	CAN_FilterInit(&CAN_FilterInitStructure);
000102  a801              ADD      r0,sp,#4
000104  f7fffffe          BL       CAN_FilterInit
;;;60     	
;;;61     	CAN_FilterInitStructure.CAN_FilterNumber = 2; //屏蔽位模式
000108  2002              MOVS     r0,#2
00010a  f88d000e          STRB     r0,[sp,#0xe]
;;;62     	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
00010e  2000              MOVS     r0,#0
000110  f88d000f          STRB     r0,[sp,#0xf]
;;;63     	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
000114  2001              MOVS     r0,#1
000116  f88d0010          STRB     r0,[sp,#0x10]
;;;64     	CAN_FilterInitStructure.CAN_FilterIdHigh = ((0x01314155 << 3) & 0xFFFF0000) >> 16;
00011a  f640108a          MOV      r0,#0x98a
00011e  f8ad0004          STRH     r0,[sp,#4]
;;;65     	CAN_FilterInitStructure.CAN_FilterIdLow = (0x01314155 << 3) & 0xFFFF;
000122  f64020a8          MOV      r0,#0xaa8
000126  f8ad0006          STRH     r0,[sp,#6]
;;;66     	CAN_FilterInitStructure.CAN_FilterMaskIdHigh = (0xffff00 << 3) >> 16;
00012a  f24070ff          MOV      r0,#0x7ff
00012e  f8ad0008          STRH     r0,[sp,#8]
;;;67     	CAN_FilterInitStructure.CAN_FilterMaskIdLow = (0xffff	<< 3) & 0xFFFF;
000132  f64f70f8          MOV      r0,#0xfff8
000136  f8ad000a          STRH     r0,[sp,#0xa]
;;;68     	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
00013a  2000              MOVS     r0,#0
00013c  f8ad000c          STRH     r0,[sp,#0xc]
;;;69     	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
000140  2001              MOVS     r0,#1
000142  f88d0011          STRB     r0,[sp,#0x11]
;;;70     	CAN_FilterInit(&CAN_FilterInitStructure);
000146  a801              ADD      r0,sp,#4
000148  f7fffffe          BL       CAN_FilterInit
;;;71     	
;;;72     	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
00014c  2014              MOVS     r0,#0x14
00014e  f88d0000          STRB     r0,[sp,#0]
;;;73     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;     						// 主优先级为1
000152  2002              MOVS     r0,#2
000154  f88d0001          STRB     r0,[sp,#1]
;;;74     	NVIC_InitStructure.NVIC_IRQChannelSubPriority=0;								          // 次优先级为0
000158  2000              MOVS     r0,#0
00015a  f88d0002          STRB     r0,[sp,#2]
;;;75     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00015e  2001              MOVS     r0,#1
000160  f88d0003          STRB     r0,[sp,#3]
;;;76     	NVIC_Init(&NVIC_InitStructure);
000164  4668              MOV      r0,sp
000166  f7fffffe          BL       NVIC_Init
;;;77     	CAN_ITConfig(CAN1,CAN_IT_FMP0,ENABLE);		
00016a  2201              MOVS     r2,#1
00016c  2102              MOVS     r1,#2
00016e  4803              LDR      r0,|L1.380|
000170  f7fffffe          BL       CAN_ITConfig
;;;78     
;;;79     //	
;;;80     //	CAN_FilterInitStructure.CAN_FilterNumber = 1;
;;;81     //	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
;;;82     //	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
;;;83     //	CAN_FilterInitStructure.CAN_FilterIdHigh=((0x00020001<<3)&0xffff0000)>>16;	//主控板发给舵机板的报文过滤器设置
;;;84     //	CAN_FilterInitStructure.CAN_FilterIdLow=(0x00020001<<3)&0xffff;
;;;85     //	CAN_FilterInitStructure.CAN_FilterMaskIdHigh=(0xffff00<<3)>>16;							   
;;;86     //	CAN_FilterInitStructure.CAN_FilterMaskIdLow=(0xffff00<<3)&0xffff;
;;;87     //	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
;;;88     //	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
;;;89     //	CAN_FilterInit(&CAN_FilterInitStructure);
;;;90     //	
;;;91     //	CAN_FilterInitStructure.CAN_FilterNumber = 2;
;;;92     //	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
;;;93     //	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
;;;94     //	CAN_FilterInitStructure.CAN_FilterIdHigh=((0x00010000<<3)&0xffff0000)>>16;
;;;95     //	CAN_FilterInitStructure.CAN_FilterIdLow=(0x00010000<<3)&0xffff;
;;;96     //	CAN_FilterInitStructure.CAN_FilterMaskIdHigh=(0xffff00<<3)>>16;							   
;;;97     //	CAN_FilterInitStructure.CAN_FilterMaskIdLow=(0xffff00<<3)&0xffff;
;;;98     //	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
;;;99     //	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
;;;100    //	CAN_FilterInit(&CAN_FilterInitStructure);
;;;101    
;;;102    //	NVIC_initstructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;    
;;;103    //	NVIC_initstructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;104    //	NVIC_initstructure.NVIC_IRQChannelSubPriority = 3;
;;;105    //	NVIC_initstructure.NVIC_IRQChannelCmd = ENABLE;    
;;;106    //	NVIC_Init(&NVIC_initstructure);	 
;;;107    
;;;108    //	NVIC_initstructure.NVIC_IRQChannel = CAN1_RX1_IRQn;    
;;;109    //	NVIC_initstructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;110    //	NVIC_initstructure.NVIC_IRQChannelSubPriority = 3;
;;;111    //	NVIC_initstructure.NVIC_IRQChannelCmd = ENABLE;    
;;;112    //	NVIC_Init(&NVIC_initstructure);
;;;113    //	
;;;114    //	CAN_ITConfig(CAN1,CAN_IT_FMP0,ENABLE);
;;;115    //	CAN_ITConfig(CAN1,CAN_IT_FMP1,ENABLE);
;;;116    }
000174  b009              ADD      sp,sp,#0x24
000176  bd00              POP      {pc}
;;;117    
                          ENDP

                  |L1.376|
                          DCD      0x40010800
                  |L1.380|
                          DCD      0x40006400

                          AREA ||i.USB_LP_CAN1_RX0_IRQHandler||, CODE, READONLY, ALIGN=2

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;119    static void answer_master(CanRxMsg *rx_message);
;;;120    void USB_LP_CAN1_RX0_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;121    {
000002  b085              SUB      sp,sp,#0x14
;;;122    	if(CAN_GetITStatus(CAN1,CAN_IT_FMP0) != RESET)
000004  2102              MOVS     r1,#2
000006  4895              LDR      r0,|L2.604|
000008  f7fffffe          BL       CAN_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d06f              BEQ      |L2.240|
;;;123    	{
;;;124    	  CAN_Receive(CAN1,CAN_FIFO0,&rx_message);
000010  4a93              LDR      r2,|L2.608|
000012  2100              MOVS     r1,#0
000014  4891              LDR      r0,|L2.604|
000016  f7fffffe          BL       CAN_Receive
;;;125    	  CAN_ClearITPendingBit(CAN1,CAN_IT_FMP0);
00001a  2102              MOVS     r1,#2
00001c  488f              LDR      r0,|L2.604|
00001e  f7fffffe          BL       CAN_ClearITPendingBit
;;;126    	  CAN_ClearFlag(CAN1, CAN_IT_FMP0);
000022  2102              MOVS     r1,#2
000024  488d              LDR      r0,|L2.604|
000026  f7fffffe          BL       CAN_ClearFlag
;;;127    		
;;;128    		if((rx_message.IDE == CAN_Id_Extended)&&(rx_message.RTR == CAN_RTR_Data))
00002a  488d              LDR      r0,|L2.608|
00002c  7a00              LDRB     r0,[r0,#8]  ; rx_message
00002e  2804              CMP      r0,#4
                  |L2.48|
000030  d15e              BNE      |L2.240|
000032  488b              LDR      r0,|L2.608|
000034  7a40              LDRB     r0,[r0,#9]  ; rx_message
000036  2800              CMP      r0,#0
000038  d1fa              BNE      |L2.48|
;;;129    		{
;;;130    			if(rx_message.ExtId==0x01314155)
00003a  4889              LDR      r0,|L2.608|
00003c  6840              LDR      r0,[r0,#4]  ; rx_message
00003e  4989              LDR      r1,|L2.612|
000040  4288              CMP      r0,r1
                  |L2.66|
000042  d16f              BNE      |L2.292|
;;;131    			{
;;;132    				if(rx_message.Data[0]=='S'&&rx_message.Data[1]=='W')
000044  4886              LDR      r0,|L2.608|
000046  7ac0              LDRB     r0,[r0,#0xb]  ; rx_message
000048  2853              CMP      r0,#0x53
00004a  d1fa              BNE      |L2.66|
00004c  4884              LDR      r0,|L2.608|
00004e  7b00              LDRB     r0,[r0,#0xc]
000050  2857              CMP      r0,#0x57
000052  d1f6              BNE      |L2.66|
;;;133    				{
;;;134    					flag.LeftHand=rx_message.Data[2];
000054  4882              LDR      r0,|L2.608|
000056  7b40              LDRB     r0,[r0,#0xd]
000058  b108              CBZ      r0,|L2.94|
00005a  2001              MOVS     r0,#1
00005c  e000              B        |L2.96|
                  |L2.94|
00005e  2000              MOVS     r0,#0
                  |L2.96|
000060  4981              LDR      r1,|L2.616|
000062  7008              STRB     r0,[r1,#0]
;;;135    					flag.RightHand=rx_message.Data[3];
000064  487e              LDR      r0,|L2.608|
000066  7b80              LDRB     r0,[r0,#0xe]
000068  b108              CBZ      r0,|L2.110|
00006a  2001              MOVS     r0,#1
00006c  e000              B        |L2.112|
                  |L2.110|
00006e  2000              MOVS     r0,#0
                  |L2.112|
000070  497d              LDR      r1,|L2.616|
000072  7088              STRB     r0,[r1,#2]
;;;136    					flag.LeftPaw=rx_message.Data[4];
000074  487a              LDR      r0,|L2.608|
000076  7bc0              LDRB     r0,[r0,#0xf]
000078  b108              CBZ      r0,|L2.126|
00007a  2001              MOVS     r0,#1
00007c  e000              B        |L2.128|
                  |L2.126|
00007e  2000              MOVS     r0,#0
                  |L2.128|
000080  4979              LDR      r1,|L2.616|
000082  7048              STRB     r0,[r1,#1]
;;;137    					flag.RightPaw=rx_message.Data[5];
000084  4876              LDR      r0,|L2.608|
000086  7c00              LDRB     r0,[r0,#0x10]
000088  b108              CBZ      r0,|L2.142|
00008a  2001              MOVS     r0,#1
00008c  e000              B        |L2.144|
                  |L2.142|
00008e  2000              MOVS     r0,#0
                  |L2.144|
000090  4975              LDR      r1,|L2.616|
000092  70c8              STRB     r0,[r1,#3]
;;;138    					//左侧手爪伸出1，收回0
;;;139    					if(flag.LeftHand!=flag.LeftHandPrv)
000094  4608              MOV      r0,r1
000096  7800              LDRB     r0,[r0,#0]  ; flag
000098  7909              LDRB     r1,[r1,#4]  ; flag
00009a  4288              CMP      r0,r1
00009c  d00f              BEQ      |L2.190|
;;;140    					{
;;;141    						if(flag.LeftHand==true)
00009e  4872              LDR      r0,|L2.616|
0000a0  7800              LDRB     r0,[r0,#0]  ; flag
0000a2  2801              CMP      r0,#1
0000a4  d102              BNE      |L2.172|
;;;142    							valve[0]=1;
0000a6  4971              LDR      r1,|L2.620|
0000a8  7008              STRB     r0,[r1,#0]
0000aa  e002              B        |L2.178|
                  |L2.172|
;;;143    						else
;;;144    							valve[0]=0;
0000ac  2000              MOVS     r0,#0
0000ae  496f              LDR      r1,|L2.620|
0000b0  7008              STRB     r0,[r1,#0]
                  |L2.178|
;;;145    						flag.LeftHandCounting=true;
0000b2  2001              MOVS     r0,#1
0000b4  496c              LDR      r1,|L2.616|
0000b6  7208              STRB     r0,[r1,#8]
;;;146    						flag.isLeftHandFinished=false;
0000b8  2000              MOVS     r0,#0
0000ba  7308              STRB     r0,[r1,#0xc]
0000bc  e002              B        |L2.196|
                  |L2.190|
;;;147    					}
;;;148    					else
;;;149    					{
;;;150    						flag.isLeftHandFinished=true;
0000be  2001              MOVS     r0,#1
0000c0  4969              LDR      r1,|L2.616|
0000c2  7308              STRB     r0,[r1,#0xc]
                  |L2.196|
;;;151    					}
;;;152    					//右侧手爪伸出1，收回0
;;;153    					if(flag.RightHand!=flag.RightHandPrv)
0000c4  4868              LDR      r0,|L2.616|
0000c6  7880              LDRB     r0,[r0,#2]  ; flag
0000c8  4967              LDR      r1,|L2.616|
0000ca  7989              LDRB     r1,[r1,#6]  ; flag
0000cc  4288              CMP      r0,r1
0000ce  d010              BEQ      |L2.242|
;;;154    					{
;;;155    						if(flag.RightHand==true)
0000d0  4865              LDR      r0,|L2.616|
0000d2  7880              LDRB     r0,[r0,#2]  ; flag
0000d4  2801              CMP      r0,#1
0000d6  d102              BNE      |L2.222|
;;;156    						{
;;;157    							valve[7]=1;
0000d8  4964              LDR      r1,|L2.620|
0000da  71c8              STRB     r0,[r1,#7]
0000dc  e002              B        |L2.228|
                  |L2.222|
;;;158    						}
;;;159    						else
;;;160    						{
;;;161    							valve[7]=0;
0000de  2000              MOVS     r0,#0
0000e0  4962              LDR      r1,|L2.620|
0000e2  71c8              STRB     r0,[r1,#7]
                  |L2.228|
;;;162    						}
;;;163    						flag.RightHandCounting=true;
0000e4  2001              MOVS     r0,#1
0000e6  4960              LDR      r1,|L2.616|
0000e8  7288              STRB     r0,[r1,#0xa]
;;;164    						flag.isRightHandFinished=false;
0000ea  2000              MOVS     r0,#0
0000ec  7388              STRB     r0,[r1,#0xe]
0000ee  e003              B        |L2.248|
                  |L2.240|
0000f0  e053              B        |L2.410|
                  |L2.242|
;;;165    					}
;;;166    					else
;;;167    					{
;;;168    						flag.isRightHandFinished=true;
0000f2  2001              MOVS     r0,#1
0000f4  495c              LDR      r1,|L2.616|
0000f6  7388              STRB     r0,[r1,#0xe]
                  |L2.248|
;;;169    					}
;;;170    					//左侧手爪闭合1，松开0
;;;171    					if(flag.LeftPaw!=flag.LeftPawPrv)
0000f8  485b              LDR      r0,|L2.616|
0000fa  7840              LDRB     r0,[r0,#1]  ; flag
0000fc  495a              LDR      r1,|L2.616|
0000fe  7949              LDRB     r1,[r1,#5]  ; flag
000100  4288              CMP      r0,r1
000102  d010              BEQ      |L2.294|
;;;172    					{
;;;173    						if(flag.LeftPaw==true)
000104  4858              LDR      r0,|L2.616|
000106  7840              LDRB     r0,[r0,#1]  ; flag
000108  2801              CMP      r0,#1
00010a  d102              BNE      |L2.274|
;;;174    							valve[2]=1;
00010c  4957              LDR      r1,|L2.620|
00010e  7088              STRB     r0,[r1,#2]
000110  e002              B        |L2.280|
                  |L2.274|
;;;175    						else
;;;176    							valve[2]=0;
000112  2000              MOVS     r0,#0
000114  4955              LDR      r1,|L2.620|
000116  7088              STRB     r0,[r1,#2]
                  |L2.280|
;;;177    						flag.LeftPawCounting=true;
000118  2001              MOVS     r0,#1
00011a  4953              LDR      r1,|L2.616|
00011c  7248              STRB     r0,[r1,#9]
;;;178    						flag.isLeftPawFinished=false;
00011e  2000              MOVS     r0,#0
000120  7348              STRB     r0,[r1,#0xd]
000122  e003              B        |L2.300|
                  |L2.292|
000124  e01e              B        |L2.356|
                  |L2.294|
;;;179    					}
;;;180    					else
;;;181    					{
;;;182    						flag.isLeftPawFinished=true;
000126  2001              MOVS     r0,#1
000128  494f              LDR      r1,|L2.616|
00012a  7348              STRB     r0,[r1,#0xd]
                  |L2.300|
;;;183    					}
;;;184    					//右侧手爪闭合1，松开0
;;;185    					if(flag.RightPaw!=flag.RightPawPrv)
00012c  484e              LDR      r0,|L2.616|
00012e  78c0              LDRB     r0,[r0,#3]  ; flag
000130  494d              LDR      r1,|L2.616|
000132  79c9              LDRB     r1,[r1,#7]  ; flag
000134  4288              CMP      r0,r1
000136  d00f              BEQ      |L2.344|
;;;186    					{
;;;187    						if(flag.RightPaw==true)
000138  484b              LDR      r0,|L2.616|
00013a  78c0              LDRB     r0,[r0,#3]  ; flag
00013c  2801              CMP      r0,#1
00013e  d102              BNE      |L2.326|
;;;188    							valve[3]=1;
000140  494a              LDR      r1,|L2.620|
000142  70c8              STRB     r0,[r1,#3]
000144  e002              B        |L2.332|
                  |L2.326|
;;;189    						else
;;;190    							valve[3]=0;
000146  2000              MOVS     r0,#0
000148  4948              LDR      r1,|L2.620|
00014a  70c8              STRB     r0,[r1,#3]
                  |L2.332|
;;;191    						flag.RightPawCounting=true;
00014c  2001              MOVS     r0,#1
00014e  4946              LDR      r1,|L2.616|
000150  72c8              STRB     r0,[r1,#0xb]
;;;192    						flag.isRightPawFinished=false;
000152  2000              MOVS     r0,#0
000154  73c8              STRB     r0,[r1,#0xf]
000156  e002              B        |L2.350|
                  |L2.344|
;;;193    					}
;;;194    					else
;;;195    					{
;;;196    						flag.isRightPawFinished=true;
000158  2001              MOVS     r0,#1
00015a  4943              LDR      r1,|L2.616|
00015c  73c8              STRB     r0,[r1,#0xf]
                  |L2.350|
;;;197    					}
;;;198    					answer_master(&rx_message);
00015e  4840              LDR      r0,|L2.608|
000160  f7fffffe          BL       answer_master
                  |L2.356|
;;;199    				}
;;;200    			}
;;;201    			if(rx_message.ExtId==0x00010400)
000164  483e              LDR      r0,|L2.608|
000166  6840              LDR      r0,[r0,#4]  ; rx_message
000168  f5b03f82          CMP      r0,#0x10400
00016c  d173              BNE      |L2.598|
;;;202    			{
;;;203    				if(rx_message.Data[0]==0x00)
00016e  483c              LDR      r0,|L2.608|
000170  7ac0              LDRB     r0,[r0,#0xb]  ; rx_message
000172  b998              CBNZ     r0,|L2.412|
;;;204    				{
;;;205    					if((rx_message.Data[1]=='C')&&(rx_message.Data[2]=='W')&&(rx_message.Data[3]=='H')&&(rx_message.Data[4]=='U'))
000174  483a              LDR      r0,|L2.608|
000176  7b00              LDRB     r0,[r0,#0xc]
000178  2843              CMP      r0,#0x43
00017a  d16c              BNE      |L2.598|
00017c  4838              LDR      r0,|L2.608|
00017e  7b40              LDRB     r0,[r0,#0xd]
000180  2857              CMP      r0,#0x57
000182  d168              BNE      |L2.598|
000184  4836              LDR      r0,|L2.608|
000186  7b80              LDRB     r0,[r0,#0xe]
000188  2848              CMP      r0,#0x48
00018a  d164              BNE      |L2.598|
00018c  4834              LDR      r0,|L2.608|
00018e  7bc0              LDRB     r0,[r0,#0xf]
000190  2855              CMP      r0,#0x55
000192  d160              BNE      |L2.598|
;;;206    						answer_master(&rx_message);
000194  4832              LDR      r0,|L2.608|
000196  f7fffffe          BL       answer_master
                  |L2.410|
00019a  e05c              B        |L2.598|
                  |L2.412|
;;;207    				}
;;;208    				else if(rx_message.Data[0]==0x04)
00019c  4830              LDR      r0,|L2.608|
00019e  7ac0              LDRB     r0,[r0,#0xb]  ; rx_message
0001a0  2804              CMP      r0,#4
0001a2  d158              BNE      |L2.598|
;;;209    				{
;;;210    					if((rx_message.Data[1]==('O'+0x40))&&(rx_message.Data[2]=='N'))//气缸开
0001a4  482e              LDR      r0,|L2.608|
0001a6  7b00              LDRB     r0,[r0,#0xc]
0001a8  288f              CMP      r0,#0x8f
0001aa  d10d              BNE      |L2.456|
0001ac  482c              LDR      r0,|L2.608|
0001ae  7b40              LDRB     r0,[r0,#0xd]
0001b0  284e              CMP      r0,#0x4e
0001b2  d109              BNE      |L2.456|
;;;211    					{
;;;212    						valve[rx_message.Data[3]-1]=1;
0001b4  2101              MOVS     r1,#1
0001b6  482a              LDR      r0,|L2.608|
0001b8  7b80              LDRB     r0,[r0,#0xe]
0001ba  1e40              SUBS     r0,r0,#1
0001bc  4a2b              LDR      r2,|L2.620|
0001be  5411              STRB     r1,[r2,r0]
;;;213    						answer_master(&rx_message);
0001c0  4827              LDR      r0,|L2.608|
0001c2  f7fffffe          BL       answer_master
0001c6  e046              B        |L2.598|
                  |L2.456|
;;;214    					}          
;;;215    					else if((rx_message.Data[1]==('E'+0x40))&&(rx_message.Data[2]=='F'))//气缸关
0001c8  4825              LDR      r0,|L2.608|
0001ca  7b00              LDRB     r0,[r0,#0xc]
0001cc  2885              CMP      r0,#0x85
0001ce  d10d              BNE      |L2.492|
0001d0  4823              LDR      r0,|L2.608|
0001d2  7b40              LDRB     r0,[r0,#0xd]
0001d4  2846              CMP      r0,#0x46
0001d6  d109              BNE      |L2.492|
;;;216    					{
;;;217    							valve[rx_message.Data[3]-1]=0;
0001d8  2100              MOVS     r1,#0
0001da  4821              LDR      r0,|L2.608|
0001dc  7b80              LDRB     r0,[r0,#0xe]
0001de  1e40              SUBS     r0,r0,#1
0001e0  4a22              LDR      r2,|L2.620|
0001e2  5411              STRB     r1,[r2,r0]
;;;218    							answer_master(&rx_message);
0001e4  481e              LDR      r0,|L2.608|
0001e6  f7fffffe          BL       answer_master
0001ea  e034              B        |L2.598|
                  |L2.492|
;;;219    					}  
;;;220    					else if((rx_message.Data[1]==('N'+0x40))&&(rx_message.Data[2]=='O')&&(rx_message.Data[3]=='W'))//气缸状态查询
0001ec  481c              LDR      r0,|L2.608|
0001ee  7b00              LDRB     r0,[r0,#0xc]
0001f0  288e              CMP      r0,#0x8e
0001f2  d130              BNE      |L2.598|
0001f4  481a              LDR      r0,|L2.608|
0001f6  7b40              LDRB     r0,[r0,#0xd]
0001f8  284f              CMP      r0,#0x4f
0001fa  d12c              BNE      |L2.598|
0001fc  4818              LDR      r0,|L2.608|
0001fe  7b80              LDRB     r0,[r0,#0xe]
000200  2857              CMP      r0,#0x57
000202  d128              BNE      |L2.598|
;;;221    					{
;;;222    						CanTxMsg tx_message;
;;;223    						tx_message.ExtId =0x00040101;
000204  481a              LDR      r0,|L2.624|
000206  9001              STR      r0,[sp,#4]
;;;224    						tx_message.RTR = CAN_RTR_Data;
000208  2000              MOVS     r0,#0
00020a  f88d0009          STRB     r0,[sp,#9]
;;;225    						tx_message.IDE = CAN_Id_Extended;
00020e  2004              MOVS     r0,#4
000210  f88d0008          STRB     r0,[sp,#8]
;;;226    						tx_message.DLC = 8;
000214  2008              MOVS     r0,#8
000216  f88d000a          STRB     r0,[sp,#0xa]
;;;227    						tx_message.Data[0] = rx_message.Data[0] + 0x80;
00021a  4811              LDR      r0,|L2.608|
00021c  7ac0              LDRB     r0,[r0,#0xb]  ; rx_message
00021e  3080              ADDS     r0,r0,#0x80
000220  b2c0              UXTB     r0,r0
000222  f88d000b          STRB     r0,[sp,#0xb]
;;;228    						tx_message.Data[1] = rx_message.Data[1];
000226  480e              LDR      r0,|L2.608|
000228  7b01              LDRB     r1,[r0,#0xc]
00022a  f88d100c          STRB     r1,[sp,#0xc]
;;;229    						tx_message.Data[2] = rx_message.Data[2];
00022e  7b41              LDRB     r1,[r0,#0xd]
000230  f88d100d          STRB     r1,[sp,#0xd]
;;;230    						tx_message.Data[3] = rx_message.Data[3];
000234  7b81              LDRB     r1,[r0,#0xe]
000236  f88d100e          STRB     r1,[sp,#0xe]
;;;231    						tx_message.Data[4] = rx_message.Data[4];
00023a  7bc1              LDRB     r1,[r0,#0xf]
00023c  f88d100f          STRB     r1,[sp,#0xf]
;;;232    						tx_message.Data[5] = valve[rx_message.Data[4]-1];      
000240  7bc0              LDRB     r0,[r0,#0xf]
000242  1e40              SUBS     r0,r0,#1
000244  4909              LDR      r1,|L2.620|
000246  5c09              LDRB     r1,[r1,r0]
000248  f88d1010          STRB     r1,[sp,#0x10]
;;;233    						CAN_Transmit(CAN1,&tx_message);
00024c  4669              MOV      r1,sp
00024e  4803              LDR      r0,|L2.604|
000250  f7fffffe          BL       CAN_Transmit
;;;234    					}
000254  bf00              NOP      
                  |L2.598|
;;;235    				}
;;;236    			}
;;;237    		}
;;;238      }
;;;239    }
000256  b005              ADD      sp,sp,#0x14
000258  bd00              POP      {pc}
;;;240    
                          ENDP

00025a  0000              DCW      0x0000
                  |L2.604|
                          DCD      0x40006400
                  |L2.608|
                          DCD      rx_message
                  |L2.612|
                          DCD      0x01314155
                  |L2.616|
                          DCD      flag
                  |L2.620|
                          DCD      valve
                  |L2.624|
                          DCD      0x00040101

                          AREA ||i.answer_master||, CODE, READONLY, ALIGN=2

                  answer_master PROC
;;;241    
;;;242    static void answer_master(CanRxMsg *rx_message)
000000  b510              PUSH     {r4,lr}
;;;243    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;244    	CanTxMsg tx_message;
;;;245    	if(rx_message->ExtId==0x00010400)
000006  6860              LDR      r0,[r4,#4]
000008  f5b03f82          CMP      r0,#0x10400
00000c  d124              BNE      |L3.88|
;;;246    	{
;;;247    		tx_message.ExtId =0x00040101;
00000e  4826              LDR      r0,|L3.168|
000010  9002              STR      r0,[sp,#8]
;;;248    		tx_message.RTR = CAN_RTR_Data;
000012  2000              MOVS     r0,#0
000014  f88d000d          STRB     r0,[sp,#0xd]
;;;249    		tx_message.IDE = CAN_Id_Extended;
000018  2004              MOVS     r0,#4
00001a  f88d000c          STRB     r0,[sp,#0xc]
;;;250    		tx_message.DLC = rx_message->DLC;
00001e  7aa0              LDRB     r0,[r4,#0xa]
000020  f88d000e          STRB     r0,[sp,#0xe]
;;;251    		tx_message.Data[0] = rx_message->Data[0] + 0x40;
000024  7ae0              LDRB     r0,[r4,#0xb]
000026  3040              ADDS     r0,r0,#0x40
000028  b2c0              UXTB     r0,r0
00002a  f88d000f          STRB     r0,[sp,#0xf]
;;;252    		tx_message.Data[1] = rx_message->Data[1];
00002e  7b21              LDRB     r1,[r4,#0xc]
000030  f88d1010          STRB     r1,[sp,#0x10]
;;;253    		tx_message.Data[2] = rx_message->Data[2];
000034  7b61              LDRB     r1,[r4,#0xd]
000036  f88d1011          STRB     r1,[sp,#0x11]
;;;254    		tx_message.Data[3] = rx_message->Data[3];
00003a  7ba1              LDRB     r1,[r4,#0xe]
00003c  f88d1012          STRB     r1,[sp,#0x12]
;;;255    		tx_message.Data[4] = rx_message->Data[4];
000040  7be1              LDRB     r1,[r4,#0xf]
000042  f88d1013          STRB     r1,[sp,#0x13]
;;;256    		tx_message.Data[5] = rx_message->Data[5];
000046  7c21              LDRB     r1,[r4,#0x10]
000048  f88d1014          STRB     r1,[sp,#0x14]
;;;257    		tx_message.Data[6] = rx_message->Data[6];
00004c  7c61              LDRB     r1,[r4,#0x11]
00004e  f88d1015          STRB     r1,[sp,#0x15]
;;;258    		tx_message.Data[7] = rx_message->Data[7];		
000052  7ca1              LDRB     r1,[r4,#0x12]
000054  f88d1016          STRB     r1,[sp,#0x16]
                  |L3.88|
;;;259    	}
;;;260    	if(rx_message->ExtId==0x01314155)
000058  4914              LDR      r1,|L3.172|
00005a  6860              LDR      r0,[r4,#4]
00005c  4288              CMP      r0,r1
00005e  d11d              BNE      |L3.156|
;;;261    	{
;;;262    		tx_message.ExtId=0x05141315;
000060  4813              LDR      r0,|L3.176|
000062  9002              STR      r0,[sp,#8]
;;;263    		tx_message.RTR=CAN_RTR_DATA;
000064  2000              MOVS     r0,#0
000066  f88d000d          STRB     r0,[sp,#0xd]
;;;264    		tx_message.IDE=CAN_Id_Extended;
00006a  2004              MOVS     r0,#4
00006c  f88d000c          STRB     r0,[sp,#0xc]
;;;265    		tx_message.DLC=6;
000070  2006              MOVS     r0,#6
000072  f88d000e          STRB     r0,[sp,#0xe]
;;;266    		tx_message.Data[0]='S';
000076  2053              MOVS     r0,#0x53
000078  f88d000f          STRB     r0,[sp,#0xf]
;;;267    		tx_message.Data[1]='W';
00007c  2157              MOVS     r1,#0x57
00007e  f88d1010          STRB     r1,[sp,#0x10]
;;;268    		tx_message.Data[2]=flag.isLeftHandFinished;
000082  480c              LDR      r0,|L3.180|
000084  7b01              LDRB     r1,[r0,#0xc]  ; flag
000086  f88d1011          STRB     r1,[sp,#0x11]
;;;269    		tx_message.Data[3]=flag.isRightHandFinished;
00008a  7b81              LDRB     r1,[r0,#0xe]  ; flag
00008c  f88d1012          STRB     r1,[sp,#0x12]
;;;270    		tx_message.Data[4]=flag.isLeftPawFinished;
000090  7b41              LDRB     r1,[r0,#0xd]  ; flag
000092  f88d1013          STRB     r1,[sp,#0x13]
;;;271    		tx_message.Data[5]=flag.isRightPawFinished;
000096  7bc1              LDRB     r1,[r0,#0xf]  ; flag
000098  f88d1014          STRB     r1,[sp,#0x14]
                  |L3.156|
;;;272    	}
;;;273    	CAN_Transmit(CAN1,&tx_message);
00009c  a901              ADD      r1,sp,#4
00009e  4806              LDR      r0,|L3.184|
0000a0  f7fffffe          BL       CAN_Transmit
;;;274    }
0000a4  b006              ADD      sp,sp,#0x18
0000a6  bd10              POP      {r4,pc}
                          ENDP

                  |L3.168|
                          DCD      0x00040101
                  |L3.172|
                          DCD      0x01314155
                  |L3.176|
                          DCD      0x05141315
                  |L3.180|
                          DCD      flag
                  |L3.184|
                          DCD      0x40006400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  flag
                          %        28
                  rx_message
                          %        20

                          AREA ||.data||, DATA, ALIGN=0

                  valve
                          %        8
